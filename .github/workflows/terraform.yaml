name: Terraform Workflow

on:
  push:
    branches:
      - main  # Trigger when changes are pushed to the 'main' branch
  workflow_dispatch:  # Optional: for manual testing

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.5'  # Specify the version of Terraform

      - name: Terraform Format Check
        run: terraform fmt -check  # Ensure that the Terraform code is formatted properly

      - name: Terraform Validate
        run: terraform validate  # Validate the Terraform configuration

      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf', '**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Set up GitHub token as environment variable
        run: echo "TF_VAR_TOKEN=${{ secrets.TOKEN }}" >> $GITHUB_ENV  # Set TF_VAR_TOKEN from GitHub Secrets

      - name: Terraform Init
        run: terraform init
        working-directory: terraform  # Specify the directory containing the .tf files

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform  # Specify the directory containing the .tf files

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform  # Specify the directory containing the .tf files
        env:
          TF_VAR_TOKEN: ${{ secrets.TOKEN }}  # Pass your custom PAT to the environment variable

      - name: Output repository details
        id: output_repo_details
        run: |
          # Retrieve the repository details from Terraform output
          REPO_NAME=$(terraform output -raw repository_name)
          REPO_DESCRIPTION=$(terraform output -raw repository_description)
          
          # Set environment variables using the correct format
          echo "repo_name=$REPO_NAME" >> $GITHUB_ENV
          echo "repo_description=$REPO_DESCRIPTION" >> $GITHUB_ENV
            - name: Debug Terraform Output
      - name: check output details
        run: |
          echo "Repository Name: $REPO_NAME"
          echo "Repository Description: $REPO_DESCRIPTION"



  add-readme:
    needs: terraform  # This job will only run after the Terraform job
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub Token for Authentication
        run: echo "GITHUB_TOKEN=${{ secrets.TOKEN }}" >> $GITHUB_ENV

      - name: Generate README content using Groq
        id: generate_readme
        run: |
          # Generate the prompt dynamically based on repository name and description
          curl -X POST https://api.groq.com/openai/v1/chat/completions \
          -H "Authorization: Bearer ${{ secrets.GROQ }}" \
          -H "Content-Type: application/json" \
          -d '{
                "model": "llama-3.3-70b-versatile",
                "messages": [{
                    "role": "user",
                    "content": "Generate a README file for a repository with the name: '${{ needs.terraform.outputs.repo_name }}' and description: '${{ needs.terraform.outputs.repo_description }}.'"
                }]
              }' > generated_readme.json
          
          # Extract the generated README content from the Groq response
          README_CONTENT=$(jq -r '.choices[0].message.content' generated_readme.json)

          # Create the README.md file with the extracted content
          echo "$README_CONTENT" > README.md

      - name: Create or Update README.md in the repository
        run: |
          # Push the generated README file to the GitHub repository
          git add README.md
          git commit -m "Add README generated by Groq"
          git push origin main
